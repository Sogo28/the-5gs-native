syntax = "proto3";

package com.aurelius.the_5gs.proto; // Match your app's package or a dedicated proto package

// Option for Java/Kotlin generated code (adjust if your generated files go elsewhere)
option java_package = "com.aurelius.the_5gs.proto";
option java_multiple_files = true;

// The ArPose message remains the same
message ArPose {
    repeated float translation = 1; // [x, y, z]
    repeated float rotation = 2;    // Quaternion: [x, y, z, w]
    int64 timestamp = 3;           // Nanoseconds, from ARCore Frame
}

// --- Video Frame Data ---
message VideoFrame {
    bytes encoded_frame_data = 1; // The actual encoded video data (e.g., H.264/H.265 NAL unit or a chunk)
    bool is_key_frame = 2;        // Hint from MediaCodec if this is an I-frame (keyframes are self-contained)
    int64 timestamp = 3;          // Nanoseconds, from the original ARCore Frame, for synchronization
  // You might also add width, height here if your video stream can change resolution,
  // though often it's established with intrinsics or an initial setup message.
}

// --- Ar Frame Packet ---
message ArFramePacket{
    int64 timestamps_ns = 1;
    ArPose pose = 2;
    VideoFrame video_frame = 3;
}

// --- Camera Intrinsics Data ---
message CameraIntrinsics {
    // Focal length in pixels
    float focal_length_x = 1;
    float focal_length_y = 2;

    // Principal point in pixels
    float principal_point_x = 3;
    float principal_point_y = 4;

    // Image dimensions (width and height in pixels) that these intrinsics apply to
    int32 image_width = 5;
    int32 image_height = 6;

    // Distortion coefficients (e.g., Brown-Conrady model k1, k2, p1, p2, k3)
    // ARCore typically provides these if distortion is significant and handled.
    // For simplicity, you can start without them or add them if your server-side VIO/SLAM needs them.
    // repeated float distortion_coefficients = 7;
}

// --- AJOUTER LES MÃŠMES STRUCTURES DE LANDMARKS ICI ---
message Landmark {
    float x = 1;
    float y = 2;
    float z = 3;
}

message HandLandmarks {
    repeated Landmark landmarks = 1;
}
// --- FIN DES AJOUTS ---

// Client sends these messages to the server
message ClientToServerMessage {
    oneof payload {
        ArFramePacket ar_frame_packet = 1;
        CameraIntrinsics camera_intrinsics = 2;
    }
}

// Server sends these messages back to the client
message ServerToClientMessage {
    oneof payload {
        string status_message = 1;
        string acknowledgement = 2;       // e.g., "Packet for timestamp X received"
        string translation_result = 3;  // The final translated text
        // NOUVEAU CHAMP pour les landmarks
        HandLandmarks hand_landmarks_result = 4;
    }
}


// Define the gRPC service
service ArDataStreamer {
    rpc StreamArData(stream ClientToServerMessage) returns (stream ServerToClientMessage);
}